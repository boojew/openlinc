<html><head><link href="styles.css" rel="stylesheet" type="text/css">
<script language="JavaScript" SRC="myJS.js"></script>
<script language="JavaScript">
var HA = new Array;
HA[3] = "~URL(1)~";
HA[1] = "Regional Settings";
HA[0] = "~MyHouse~";
HA[2] = "<a class = 'handf' href='network.htm'>Time</a>";

function month(name, numdays, abbr){this.name = name;this.numdays = numdays;	this.abbr = abbr;}
function ans(daySave,value){this.daySave = daySave;this.value = value;}
function city(name, lat, lng, zoneHr){this.name = name;this.lat = lat;this.lng = lng;this.zoneHr = zoneHr;}

var ML = new Array();
var i = 0;
ML[i++] = new month("January", 31, "Jan");
ML[i++] = new month("February", 28, "Feb");
ML[i++] = new month("March", 31, "Mar");
ML[i++] = new month("April", 30, "Apr");
ML[i++] = new month("May", 31, "May");
ML[i++] = new month("June", 30, "Jun");
ML[i++] = new month("July", 31, "Jul");
ML[i++] = new month("August", 31, "Aug");
ML[i++] = new month("September", 30, "Sep");
ML[i++] = new month("October", 31, "Oct");
ML[i++] = new month("November", 30, "Nov");
ML[i++] = new month("December", 31, "Dec");

var YesNo = new Array();
i=0;
YesNo[i++] = new ans("No",0);
YesNo[i++] = new ans("Yes",60);

var City = new Array();
j = 0;
City[j++] = new city("Enter Lat/Long -->",0,0,0);
City[j++] = new city("",0,0,0);
City[j++] = new city("US CITIES",0,0,0);
City[j++] = new city("Albuquerque, NM", 35.0833,106.65,7);
City[j++] = new city("Anchorage, AK", 61.217, 149.90,9);
City[j++] = new city("Atlanta, GA", 33.733, 84.383, 5);
City[j++] = new city("Austin, TX", 30.283, 97.733, 6);
City[j++] = new city("Birmingham, AL", 33.521, 86.8025, 6);
City[j++] = new city("Bismarck, ND", 46.817, 100.783, 6);
City[j++] = new city("Boston, MA", 42.35, 71.05, 5);
City[j++] = new city("Boulder, CO", 40.125, 105.237, 7);
City[j++] = new city("Chicago, IL", 41.85,87.65,6);
City[j++] = new city("Dallas, TX", 32.46, 96.47,6);
City[j++] = new city("Denver, CO", 39.733, 104.983, 7);
City[j++] = new city("Detroit, MI", 42.333, 83.05, 5);
City[j++] = new city("Honolulu, HI", 21.30, 157.85, 10);
City[j++] = new city("Houston, TX", 29.75, 95.35, 6);
City[j++] = new city("Indianapolis, IN", 39.767, 86.15, 5);
City[j++] = new city("Jackson, MS", 32.283, 90.183, 6);
City[j++] = new city("Kansas City, MO", 39.083, 94.567,6);
City[j++] = new city("Los Angeles, CA",34.05,118.233,8);
City[j++] = new city("Menomonee Falls, WI",43.11,88.10,6);
City[j++] = new city("Miami, FL", 25.767, 80.183,5);
City[j++] = new city("Minneapolis, MN", 44.967, 93.25, 6);
City[j++] = new city("New Orleans, LA", 29.95, 90.067, 6);
City[j++] = new city("New York City, NY", 40.7167, 74.0167, 5);
City[j++] = new city("Oklahoma City, OK", 35.483, 97.533,6);
City[j++] = new city("Philadelphia, PA", 39.95, 75.15, 5);
City[j++] = new city("Phoenix, AZ",33.433,112.067,7);
City[j++] = new city("Pittsburgh, PA",40.433,79.9833,5);
City[j++] = new city("Portland, ME", 43.666, 70.283, 5);
City[j++] = new city("Portland, OR", 45.517, 122.65, 8);
City[j++] = new city("Raleigh, NC", 35.783, 78.65, 5);
City[j++] = new city("Richmond, VA", 37.5667, 77.450, 5);
City[j++] = new city("Saint Louis, MO", 38.6167,90.1833,6);
City[j++] = new city("San Antonio, TX", 29.53, 98.47, 5);
City[j++] = new city("San Diego, CA", 32.7667, 117.2167, 8);
City[j++] = new city("San Francisco, CA",37.7667,122.4167,8);
City[j++] = new city("Seattle, WA",47.60,122.3167,8);
City[j++] = new city("Washington DC", 38.8833, 77.0333,5);

function setLatLong(f, index)
{
f["latDeg"].value = City[index].lat;
f["lonDeg"].value = City[index].lng;
f["latMin"].value = 0;
f["latSec"].value = 0;
f["lonMin"].value = 0;
f["lonSec"].value = 0;
convLatLong(f);
f["hrsToGMT"].value =  City[index].zoneHr;
}

function isLeapYear(yr){return ((yr % 4 == 0 && yr % 100 != 0) || yr % 400 == 0);}

function isPosInteger(inputVal)
{
inputStr = ("" + inputVal);
for (var i = 0; i < inputStr.length; i++) {
	var oneChar = inputStr.charAt(i);
	if (oneChar < "0" || oneChar > "9")
		return false;}
	return true;
}

function isInteger(inputVal)
{
inputStr = "" + inputVal;
if(inputStr == "NaN") return false;
if(inputStr == "-NaN") return false;
for (var i = 0; i < inputStr.length; i++)
	{
	var oneChar = inputStr.charAt(i);
	if (i == 0 && (oneChar == "-" || oneChar == "+"))continue;
	if (oneChar < "0" || oneChar > "9")return false;
    }
return true;
}

function isNumber(inputVal)
{
var oneDecimal = false;
var inputStr = "" + inputVal;
for (var i = 0; i < inputStr.length; i++)
	{
    var oneChar = inputStr.charAt(i);
    if (i == 0 && (oneChar == "-" || oneChar == "+"))continue;
    if (oneChar == "." && !oneDecimal)
       {
       oneDecimal = true;
       continue;
        }
    if (oneChar < "0" || oneChar > "9")return false;
	}
return true;
}

function isValidInput(f, index, latLongForm,check)
	{
        if(check<12) return true;
        
		if (f["day"].value == "" || (f["year"].value == ""))
		{	alert("You must enter a day/year before attempting the calculation.");
			return false;
		}
		if (!isPosInteger(f["day"].value) || f["day"].value == 0 || (!isInteger(f["year"].value)))
		{
			alert("The day/year must be a positive integer.");
			return false;
		}
		if ( (f["year"].value < -1000) || (f["year"].value > 3000) )
		{
			alert("The algorithm used is not valid for years outside of/nthe range -1000 to 3000.");
			return false;
		}

		if ((index != 1) && (f["day"].value > ML[index].numdays))
		{
			alert("There are only " + ML[index].numdays + " days in "
				+ ML[index].name + ".");
			return false;
		}

		if (index == 1)
		{
			if (isLeapYear(f["year"].value)) {
				if (f["day"].value > (ML[index].numdays + 1))
				{
					alert("There are only " + (ML[index].numdays + 1)
						+ " days in " + ML[index].name + ".");
					return false;
				}
				else
					return true;
			}
			else
			{
				if (f["day"].value > ML[index].numdays)
				{
					alert("There are only " + ML[index].numdays
						+ " days in " + ML[index].name + ".");
					return false;
				}
				else
					return true;
			}
		}
		else
			return true;
	}



function convLatLong(f)
{
if(f["latDeg"].value == "")f["latDeg"].value = 0;
if(f["latMin"].value == "")f["latMin"].value = 0;
if(f["latSec"].value == "")f["latSec"].value = 0;
if(f["lonDeg"].value == "")f["lonDeg"].value = 0;
if(f["lonMin"].value == "")f["lonMin"].value = 0;
if(f["lonSec"].value == "")f["lonSec"].value = 0;

var neg = 0;
if(f["latDeg"].value.charAt(0) == '-')neg = 1;

if(neg != 1)
	{
	var latSeconds = (parseFloat(f["latDeg"].value))*3600
		+ parseFloat(f["latMin"].value)*60
		+ parseFloat(f["latSec"].value)*1;

		f["latDeg"].value = Math.floor(latSeconds/3600);
		f["latMin"].value = Math.floor((latSeconds
		- (parseFloat(f["latDeg"].value)*3600))/60);
		f["latSec"].value = Math.floor((latSeconds
		- (parseFloat(f["latDeg"].value)*3600)
		- (parseFloat(f["latMin"].value)*60)) + 0.5);
	}
else if(parseFloat(f["latDeg"].value) > -1)
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600
				- parseFloat(f["latMin"].value)*60
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = "-0";
			f["latMin"].value = Math.floor((-latSeconds)/60);
			f["latSec"].value = Math.floor( (-latSeconds
				- (parseFloat(f["latMin"].value)*60)) + 0.5);

		}
		else
		{
			var latSeconds = parseFloat(f["latDeg"].value)*3600
				- parseFloat(f["latMin"].value)*60
				- parseFloat(f["latSec"].value)*1;

			f["latDeg"].value = Math.ceil(latSeconds/3600);
			f["latMin"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600))/60);
			f["latSec"].value = Math.floor((-latSeconds
				+ (parseFloat(f["latDeg"].value)*3600)
				- (parseFloat(f["latMin"].value)*60)) + 0.5);
		}

		neg = 0;
		if(f["lonDeg"].value.charAt(0) == '-')
		{
			neg = 1;
		}

		if(neg != 1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600
				+ parseFloat(f["lonMin"].value)*60
				+ parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.floor(lonSeconds/3600);
			f["lonMin"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((lonSeconds
				- (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value))*60) + 0.5);
		}
		else if(parseFloat(f["lonDeg"].value) > -1)
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600
				- parseFloat(f["lonMin"].value)*60
				- parseFloat(f["lonSec"].value)*1;

			f["lonDeg"].value = "-0";
			f["lonMin"].value = Math.floor((-lonSeconds)/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}
		else
		{
			var lonSeconds = parseFloat(f["lonDeg"].value)*3600
				- parseFloat(f["lonMin"].value)*60
				- parseFloat(f["lonSec"].value)*1;
			f["lonDeg"].value = Math.ceil(lonSeconds/3600);
			f["lonMin"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600))/60);
			f["lonSec"].value = Math.floor((-lonSeconds
				+ (parseFloat(f["lonDeg"].value)*3600)
				- (parseFloat(f["lonMin"].value)*60)) + 0.5);
		}

		if(latSeconds > 324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = 89.");
			f["latDeg"].value = 89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(latSeconds < -324000)
		{
			alert("You have entered an invalid latitude.\n  Setting lat = -89.");
			f["latDeg"].value = -89;
			f["latMin"].value = 0;
			f["latSec"].value = 0;
		}
		if(lonSeconds > 648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = 180.");
			f["lonDeg"].value = 180;
			f["lonMin"].value = 0;
			f["lonSec"].value = 0;
		}
		if(lonSeconds < -648000)
		{
			alert("You have entered an invalid longitude.\n Setting lon = -180.");
			f["lonDeg"].value = -180;
			f["lonMin"].value = 0;
			f["lonSec"].value =0;
		}
}

function radToDeg(angleRad){return (180.0 * angleRad / Math.PI);}
function degToRad(angleDeg){return (Math.PI * angleDeg / 180.0);}
function calcDayOfYear(mn, dy, lpyr)
{
var k = (lpyr ? 1 : 2);
var doy = Math.floor((275 * mn)/9) - k * Math.floor((mn + 9)/12) + dy -30;
return doy;
}
function calcDayOfWeek(juld)
{
var A = (juld + 1.5) % 7;
var DOW = (A==0)?"Sunday":(A==1)?"Monday":(A==2)?"Tuesday":(A==3)?"Wednesday":(A==4)?"Thursday":(A==5)?"Friday":"Saturday";
return DOW;
}
function calcJD(year, month, day)
{
	if (month <= 2) {
		year -= 1;
		month += 12;
    }
	var A = Math.floor(year/100);
	var B = 2 - A + Math.floor(A/4);
	var JD = Math.floor(365.25*(year + 4716)) + Math.floor(30.6001*(month+1)) + day + B - 1524.5;
	return JD;
}

function calcDayFromJD(jd)
{
var z = Math.floor(jd + 0.5);
var f = (jd + 0.5) - z;

	if (z < 2299161) {
		var A = z;
	} else {
		alpha = Math.floor((z - 1867216.25)/36524.25);
		var A = z + 1 + alpha - Math.floor(alpha/4);
	}

var B = A + 1524;
var C = Math.floor((B - 122.1)/365.25);
var D = Math.floor(365.25 * C);
var E = Math.floor((B - D)/30.6001);
var day = B - D - Math.floor(30.6001 * E) + f;
var month = (E < 14) ? E - 1 : E - 13;
var year = (month > 2) ? C - 4716 : C - 4715;
return ((day<10 ? "0" : "") + day + ML[month-1].abbr);
}

function calcTimeJulianCent(jd)
{
var T = (jd - 2451545.0)/36525.0;
return T;
}

function calcJDFromJulianCent(t)
{
var JD = t * 36525.0 + 2451545.0;
return JD;
}

function calcGeomMeanLongSun(t)
{
var L0 = 280.46646 + t * (36000.76983 + 0.0003032 * t);
while(L0 > 360.0)L0 -= 360.0;
while(L0 < 0.0)L0 += 360.0;
return L0;
}

function calcGeomMeanAnomalySun(t)
{
var M = 357.52911 + t * (35999.05029 - 0.0001537 * t);
return M;
}

function calcEccentricityEarthOrbit(t)
{
var e = 0.016708634 - t * (0.000042037 + 0.0000001267 * t);
return e;
}

function calcSunEqOfCenter(t)
{
var m = calcGeomMeanAnomalySun(t);
var mrad = degToRad(m);
var sinm = Math.sin(mrad);
var sin2m = Math.sin(mrad+mrad);
var sin3m = Math.sin(mrad+mrad+mrad);

var C = sinm * (1.914602 - t * (0.004817 + 0.000014 * t)) + sin2m * (0.019993 - 0.000101 * t) + sin3m * 0.000289;
return C;
}

function calcSunTrueLong(t)
{
var l0 = calcGeomMeanLongSun(t);
var c = calcSunEqOfCenter(t);
var O = l0 + c;
return O;
}

function calcSunApparentLong(t)
{
var o = calcSunTrueLong(t);
var omega = 125.04 - 1934.136 * t;
var lambda = o - 0.00569 - 0.00478 * Math.sin(degToRad(omega));
return lambda;
}

function calcMeanObliquityOfEcliptic(t)
{
var seconds = 21.448 - t*(46.8150 + t*(0.00059 - t*(0.001813)));
var e0 = 23.0 + (26.0 + (seconds/60.0))/60.0;
return e0;
}

function calcObliquityCorrection(t)
{
var e0 = calcMeanObliquityOfEcliptic(t);
var omega = 125.04 - 1934.136 * t;
var e = e0 + 0.00256 * Math.cos(degToRad(omega));
return e;
}

function calcSunRtAscension(t)
{
var e = calcObliquityCorrection(t);
var lambda = calcSunApparentLong(t);
var tananum = (Math.cos(degToRad(e)) * Math.sin(degToRad(lambda)));
var tanadenom = (Math.cos(degToRad(lambda)));
var alpha = radToDeg(Math.atan2(tananum, tanadenom));
return alpha;
}

function calcSunDeclination(t)
{
var e = calcObliquityCorrection(t);
var lambda = calcSunApparentLong(t);
var sint = Math.sin(degToRad(e)) * Math.sin(degToRad(lambda));
var theta = radToDeg(Math.asin(sint));
return theta;
}

function calcEquationOfTime(t)
{
var epsilon = calcObliquityCorrection(t);
var l0 = calcGeomMeanLongSun(t);
var e = calcEccentricityEarthOrbit(t);
var m = calcGeomMeanAnomalySun(t);
var y = Math.tan(degToRad(epsilon)/2.0);
y *= y;
var sin2l0 = Math.sin(2.0 * degToRad(l0));
var sinm   = Math.sin(degToRad(m));
var cos2l0 = Math.cos(2.0 * degToRad(l0));
var sin4l0 = Math.sin(4.0 * degToRad(l0));
var sin2m  = Math.sin(2.0 * degToRad(m));
var Etime = y * sin2l0 - 2.0 * e * sinm + 4.0 * e * y * sinm * cos2l0
		- 0.5 * y * y * sin4l0 - 1.25 * e * e * sin2m;
return radToDeg(Etime)*4.0;
}

function calcHourAngleSunrise(lat, solarDec)
{
var latRad = degToRad(lat);
var sdRad  = degToRad(solarDec)
var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));
var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));
return HA;
}

function calcHourAngleSunset(lat, solarDec)
{
var latRad = degToRad(lat);
var sdRad  = degToRad(solarDec)
var HAarg = (Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad));
var HA = (Math.acos(Math.cos(degToRad(90.833))/(Math.cos(latRad)*Math.cos(sdRad))-Math.tan(latRad) * Math.tan(sdRad)));
return -HA;
}

function calcSunriseUTC(JD, latitude, longitude)
{
var t = calcTimeJulianCent(JD);
var noonmin = calcSolNoonUTC(t, longitude);
var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);
var eqTime = calcEquationOfTime(tnoon);
var solarDec = calcSunDeclination(tnoon);
var hourAngle = calcHourAngleSunrise(latitude, solarDec);
var delta = longitude - radToDeg(hourAngle);
var timeDiff = 4 * delta;
var timeUTC = 720 + timeDiff - eqTime;
var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0);
eqTime = calcEquationOfTime(newt);
solarDec = calcSunDeclination(newt);
hourAngle = calcHourAngleSunrise(latitude, solarDec);
delta = longitude - radToDeg(hourAngle);
timeDiff = 4 * delta;
timeUTC = 720 + timeDiff - eqTime;
return timeUTC;
}

function calcSolNoonUTC(t, longitude)
{
var tnoon = calcTimeJulianCent(calcJDFromJulianCent(t) + longitude/360.0);
var eqTime = calcEquationOfTime(tnoon);
var solNoonUTC = 720 + (longitude * 4) - eqTime;
var newt = calcTimeJulianCent(calcJDFromJulianCent(t) -0.5 + solNoonUTC/1440.0);
eqTime = calcEquationOfTime(newt);
solNoonUTC = 720 + (longitude * 4) - eqTime;
return solNoonUTC;
}

function calcSunsetUTC(JD, latitude, longitude)
{
var t = calcTimeJulianCent(JD);
var noonmin = calcSolNoonUTC(t, longitude);
var tnoon = calcTimeJulianCent (JD+noonmin/1440.0);
var eqTime = calcEquationOfTime(tnoon);
var solarDec = calcSunDeclination(tnoon);
var hourAngle = calcHourAngleSunset(latitude, solarDec);
var delta = longitude - radToDeg(hourAngle);
var timeDiff = 4 * delta;
var timeUTC = 720 + timeDiff - eqTime;
var newt = calcTimeJulianCent(calcJDFromJulianCent(t) + timeUTC/1440.0);
eqTime = calcEquationOfTime(newt);
solarDec = calcSunDeclination(newt);
hourAngle = calcHourAngleSunset(latitude, solarDec);
delta = longitude - radToDeg(hourAngle);
timeDiff = 4 * delta;
timeUTC = 720 + timeDiff - eqTime;
return timeUTC;
}

function getLatitude(latLongForm)
{
var neg = 0;
var strLatDeg = latLongForm["latDeg"].value;
var degs = parseFloat(latLongForm["latDeg"].value);
if (latLongForm["latDeg"].value.charAt(0) == '-')neg = 1;
if (strLatDeg.indexOf(".") != -1)
	{
	latLongForm["latMin"].value = 0;
	latLongForm["latSec"].value = 0;
	}
if(latLongForm["latMin"].value == "")latLongForm["latMin"].value = 0;
if(latLongForm["latSec"].value == "")latLongForm["latSec"].value = 0;
var mins = parseFloat(latLongForm["latMin"].value);
var secs = parseFloat(latLongForm["latSec"].value);
var decLat = degs
if(neg != 1)decLat=decLat+ (mins / 60) + (secs / 3600);
if(neg == 1)decLat=decLat- (mins / 60) - (secs / 3600);
return decLat;
}


function getLongitude(latLongForm)
{
var neg = 0;
var strLonDeg = latLongForm["lonDeg"].value;
var degs = parseFloat(latLongForm["lonDeg"].value);
if (latLongForm["lonDeg"].value.charAt(0) == '-')neg = 1;
if (strLonDeg.indexOf(".") != -1)
	{
		latLongForm["lonMin"].value = 0;
		latLongForm["lonSec"].value = 0;
	}
if(latLongForm["lonMin"].value == "")latLongForm["lonMin"].value = 0;
if(latLongForm["lonSec"].value == "")latLongForm["lonSec"].value = 0;
var mins = parseFloat(latLongForm["lonMin"].value);
var secs = parseFloat(latLongForm["lonSec"].value);
var decLon = degs;
if(neg == 0) decLon=decLon+(mins / 60) + (secs / 3600);
if(neg == 1)var decLon=decLon-(mins / 60) - (secs / 3600);
return decLon;
}

function timeStringShortAMPM(minutes, JD)
{
var julianday = JD;
var floatHour = minutes / 60.0;
var hour = Math.floor(floatHour);
var floatMinute = 60.0 * (floatHour - Math.floor(floatHour));
var minute = Math.floor(floatMinute);
var floatSec = 60.0 * (floatMinute - Math.floor(floatMinute));
var second = Math.floor(floatSec + 0.5);
var PM = false;

	minute += (second >= 30)? 1 : 0;

	if (minute >= 60)
	{
		minute -= 60;
		hour ++;
	}

	var daychange = false;
	if (hour > 23)
	{
		hour -= 24;
		daychange = true;
		julianday += 1.0;
	}

	if (hour < 0)
	{
		hour += 24;
		daychange = true;
		julianday -= 1.0;
	}

	if (hour > 12)
	{
		hour -= 12;
		PM = true;
	}

   if (hour == 12)PM = true;

    if (hour == 0)
	{
		PM = false;
		hour = 12;
	}

	var timeStr = hour + ":";
	if (minute < 10)	//	i.e. only one digit
		timeStr += "0" + minute + ((PM)?"PM":"AM");
	else
		timeStr += "" + minute + ((PM)?"PM":"AM");

    if (daychange) return timeStr + " " + calcDayFromJD(julianday);
		return timeStr;
}

function calcSun(riseSetForm, latLongForm, index, index2)
{
var I,latitude,longitude,indexRS,indexDay,daySavings,tds;

var sd = document.getElementById('SDday').value*1;
var ed = document.getElementById('EDday').value*1;
var SDm = document.getElementById('SDmos').selectedIndex;
var EDm = document.getElementById('EDmos').selectedIndex;
indexRS = riseSetForm.mos.selectedIndex;
indexDay = riseSetForm["day"].value;
tds = 0;
if(YesNo[index].value)
    {
    if(indexRS > SDm && indexRS < EDm) tds = 60;
     if(indexRS == SDm)
        if(indexDay >= sd)tds = 60;
    if(indexRS == EDm)
        if(indexDay < ed)tds = 60;
     }   

if(index2 != 0)setLatLong(latLongForm, index2);
latitude = getLatitude(latLongForm);
longitude = getLongitude(latLongForm);

for(I=0;I<13;I++)
{
if(I == 12)
{
indexRS = riseSetForm.mos.selectedIndex;
indexDay = riseSetForm["day"].value;
daySavings = tds;
}
else
{
indexRS = I;
indexDay= 1;
daySavings = 0;
}

if (isValidInput(riseSetForm, indexRS, latLongForm,I))
	{
	if((latitude >= -90) && (latitude < -89))
	{
		alert("All latitudes between 89 and 90 S\n will be set to -89");
		latLongForm["latDeg"].value = -89;
		latitude = -89;
	}
	if ((latitude <= 90) && (latitude > 89))
	{
		alert("All latitudes between 89 and 90 N\n will be set to 89");
		latLongForm["latDeg"].value = 89;
		latitude = 89;
	}
	var JD = calcJD(parseFloat(riseSetForm["year"].value), indexRS + 1, parseFloat(indexDay));
	var dow = calcDayOfWeek(JD);
	var doy = calcDayOfYear(indexRS + 1, parseFloat(indexDay), isLeapYear(riseSetForm["year"].value));
	var T = calcTimeJulianCent(JD);
	var alpha = calcSunRtAscension(T);
	var theta = calcSunDeclination(T);
	var Etime = calcEquationOfTime(T);
	var eqTime = Etime;
	var solarDec = theta;
	var riseTimeGMT = calcSunriseUTC(JD, latitude, longitude);
	if (!isNumber(riseTimeGMT)){alert("Cannot Find Sunrise!");return;}

	var nosunset = false;
	var setTimeGMT = calcSunsetUTC(JD, latitude, longitude);
	if (!isNumber(setTimeGMT)){alert ("Cannot Find Sunset!");return;}

	var zone = latLongForm["hrsToGMT"].value;
	if(zone > 12 || zone < -12.5)
		{
			alert("The offset must be between -12.5 and 12.  \n Setting \"Off-Set\"=0");
			zone = "0";
			latLongForm["hrsToGMT"].value = zone;
		}
var riseTimeLST = riseTimeGMT - (60 * zone) + daySavings;
var riseStr = timeStringShortAMPM(riseTimeLST, JD);
if(I==12)   riseSetForm["sunrise"].value = riseStr;
else    document.getElementById('R'+I).value = riseStr;
var setTimeLST = setTimeGMT - (60 * zone) + daySavings;
var setStr = timeStringShortAMPM(setTimeLST, JD);
if(I==12)   riseSetForm["sunset"].value = setStr;
else    document.getElementById('S'+I).value =setStr; 
   }
}
}

function UpdateAllandgoback(riseSetForm,p,n)
{
var newgroup,datastr,str;
var i;
datastr = " ";
for(i=0;i<=11;i++)
{
if(i<10) datastr += "S0"+i+"=";
else    datastr += "S"+i+"=";
datastr +=document.getElementById('R'+i).value;
datastr +=document.getElementById('S'+i).value;
datastr += "&";
}
datastr += "S12="+riseSetForm["sunrise"].value+riseSetForm["sunset"].value+"&";
datastr += "S13="+City[document.getElementById('Cit').selectedIndex].name+"&";

datastr += "S14="+document.getElementById('DST').selectedIndex+"n"+document.getElementById('SDmos').selectedIndex+"n"+document.getElementById('SDday').value+"n"+document.getElementById('EDmos').selectedIndex+"n"+document.getElementById('EDday').value+"n"+riseSetForm.mos.selectedIndex+"n"+riseSetForm["day"].value+"&";
if(n==1)newAJAXCommand('sun.htm?Post',null,null,datastr);
if(p==1)
    if('~C~'!= '0') setTimeout("location.href='setup.htm?~CurrentRoomOff~=~CurrentRoomNo~=F'",2000);
    else    setTimeout("location.href='network.htm'",2000);
}
 

</SCRIPT>
<body bgcolor="#F4F4F4" onload="MakeHeader();MakeRFooter()">
<div id="Y"> </div>
<CENTER>
<table cellpadding=3 cellspacing=15>
<tr><td><input type='button' class='smbuttons'  value="Save and return" onclick="UpdateAllandgoback(riseSetCalc,1,1)"> </td>
<td><input type='button' class='smbuttons'  value="Cancel and return" onclick="UpdateAllandgoback(riseSetCalc,1,0)"></td></tr></table>
</center>
<FORM name=cityLatLong>
<CENTER><TABLE  cellpadding="3"><TBODY>
<tr><td class='itext'>Select City</td>
<TD><SELECT id='Cit'class='iitext'onchange="calcSun(riseSetCalc, cityLatLong, cityLatLong.dayAns.selectedIndex, cityLatLong.cities.selectedIndex);"
name=cities><SCRIPT language=JavaScript>
for (i = 0; i < City.length; i++) {
	if(City[i].name == '~City~')	document.writeln("<OPTION SELECTED>" + City[i].name);
    else    document.writeln("<OPTION>" + City[i].name);
    }
</SCRIPT></SELECT></TD>
<td class='cb' colspan='2'>Select <B>Enter Lat/Long -&gt;</B> to manually enter lat/long.</td></tr>
</TBODY></TABLE>
<TABLE  cellpadding="3"><TBODY>
<tr><td class='itext'>Lat  Deg:  Min:  Sec:</td>
<td><input type='text'  size='5' class='itext'value=34 name=latDeg></td>
<td><input type='text'  size='5' class='itext'value=2 name=latMin></td>
<td><input type='text'  size='5' class='itext'value=60 name=latSec></td></tr>
<tr><td class='itext'>Long  Deg:  Min:  Sec:</td>
<td><input type='text'  size='5' class='itext'value=118 name=lonDeg></td>
<td><input type='text'  size='5' class='itext'value=13 name=lonMin></td>
<td><input type='text'  size='5' class='itext'value=59 name=lonSec></td></tr>
<tr><td class='itext'>UTC Offset</td>
<td><input type='text'  size='5'class='itext'value=8 name=hrsToGMT></td></tr>
<tr><td class='itext'>Daylight Savings</td>
<td ><SELECT id='DST' class='iitext' onchange="calcSun(riseSetCalc, cityLatLong, cityLatLong.dayAns.selectedIndex, cityLatLong.cities.selectedIndex);" name=dayAns>
<SCRIPT language=JavaScript>
for(i=0; i < YesNo.length; i++)
    if ('~SSS~' == i)document.writeln("<OPTION SELECTED>" + YesNo[i].daySave);
    else    document.writeln("<OPTION>" + YesNo[i].daySave);
</SCRIPT></SELECT></TD>
<TD class='cb'>Start
<SELECT class='cb' 
id='SDmos'>
<SCRIPT language=JavaScript>
dateObj1 = new Date();
thismonth = dateObj1.getMonth();
today = dateObj1.getDate();
for (i = 0; i < ML.length; i++)
	{
	if (i == 2)document.writeln("<OPTION SELECTED>" + ML[i].abbr);
	else    document.writeln("<OPTION>" + ML[i].abbr);
	}
</SCRIPT></SELECT><input type='text'class='cb'size='1' id='SDday' value='14'></TD>
<TD class='cb'>End
<SELECT class='cb' 
id='EDmos'>
<SCRIPT language=JavaScript>
dateObj1 = new Date();
thismonth = dateObj1.getMonth();
today = dateObj1.getDate();
for (i = 0; i < ML.length; i++)
	{
	if (i == 10)document.writeln("<OPTION SELECTED>" + ML[i].abbr);
	else    document.writeln("<OPTION>" + ML[i].abbr);
	}
</SCRIPT></SELECT><input type='text'class='cb'size='1'id='EDday'value='1'></TD>
</TR></TBODY></TABLE></CENTER></FORM>
<FORM name=riseSetCalc><CENTER><TABLE><TBODY>
<TR><TD class='itext'>Month: Day: Year:</TD>
<TD><SELECT class='iitext' onchange="calcSun(riseSetCalc, cityLatLong, cityLatLong.dayAns.selectedIndex, cityLatLong.cities.selectedIndex);"
name=mos>
<SCRIPT language=JavaScript>
dateObj1 = new Date();
thismonth = dateObj1.getMonth();
today = dateObj1.getDate();
for (i = 0; i < ML.length; i++)
	{
	if (i == thismonth)document.writeln("<OPTION SELECTED>" + ML[i].name);
	else    document.writeln("<OPTION>" + ML[i].name);
	}
</SCRIPT></SELECT></TD>
<SCRIPT language=JavaScript>
dateObj2 = new Date();
thisday = dateObj2.getDate();
document.writeln("<TD><INPUT class='iitext' TYPE=\"text\" NAME=\"day\" SIZE=\"2\" VALUE=\"" + thisday + "\"></TD>");
dateObj3 = new Date();
thisYear = dateObj3.getYear();
if(thisYear <=199)thisYear=(thisYear*1)+1900;
document.writeln("<TD class='iitext'><INPUT class='iitext' TYPE=\"text\" NAME=\"year\" SIZE=\"4\"VALUE=\"" + thisYear*1 + "\"></TD>");
</SCRIPT></TR></TBODY></TABLE>

<BR><INPUT  onclick="calcSun(riseSetCalc, cityLatLong, cityLatLong.dayAns.selectedIndex, cityLatLong.cities.selectedIndex);" type=button class='smbuttons'value="     Calculate Sunrise/Sunset     " name=RiseSet>
<BR><BR><table>
<tr><td class='iitext'>Sunrise</td><td><CENTER><INPUT class='iitext' size=8 name=sunrise></CENTER></td></tr>
<tr><td class='iitext'>Sunset</td><td><CENTER><INPUT class='iitext' size=8 name=sunset></CENTER></TD></tr>
</table></FORM></FONT>
<table cellpadding=3 cellspacing=15>
<tr><td><input type='button' class='smbuttons'  value="Save and return" onclick="UpdateAllandgoback(riseSetCalc,1,1);"> </td>
<td><input type='button' class='smbuttons'  value="Cancel and return" onclick="UpdateAllandgoback(riseSetCalc,1,0)"></td></tr></table>
<br><br>
<table><tr class='cb'><td>Jan</td><td>Feb</td><td>Mar</td><td>Apr</td><td>May</td><td>Jun</td><td>Jul</td><td>Aug</td><td>Sept</td><td>Oct</td><td>Nov</td><td>Dec</td></tr>
<tr><td><input type='text'  size='5' class='cb'value='~SS(0)~' id='R0'></td>
<td><input type='text'  size='5' class='cb'value='~SS(1)~' id='R1'></td>
<td><input type='text'  size='5' class='cb'value='~SS(2)~'id='R2'></td>
<td><input type='text'  size='5' class='cb'value='~SS(3)~' id='R3'></td>
<td><input type='text'  size='5' class='cb'value='~SS(4)~' id='R4'></td>
<td><input type='text'  size='5' class='cb'value='~SS(5)~' id='R5'></td>
<td><input type='text'  size='5' class='cb'value='~SS(6)~' id='R6'></td>
<td><input type='text'  size='5' class='cb'value='~SS(7)~' id='R7'></td>
<td><input type='text'  size='5' class='cb'value='~SS(8)~' id='R8'></td>
<td><input type='text'  size='5' class='cb'value='~SS(9)~' id='R9'></td>
<td><input type='text'  size='5' class='cb'value='~SS(10)~' id='R10'></td>
<td><input type='text'  size='5' class='cb'value='~SS(11)~' id='R11'></td></tr><tr>
<td><input type='text'  size='5' class='cb'value='~SS(12)~' id='S0'></td>
<td><input type='text'  size='5' class='cb'value='~SS(13)~' id='S1'></td>
<td><input type='text'  size='5' class='cb'value='~SS(14)~' id='S2'></td>
<td><input type='text'  size='5' class='cb'value='~SS(15)~' id='S3'></td>
<td><input type='text'  size='5' class='cb'value='~SS(16)~' id='S4'></td>
<td><input type='text'  size='5' class='cb'value='~SS(17)~' id='S5'></td>
<td><input type='text'  size='5' class='cb'value='~SS(18)~' id='S6'></td>
<td><input type='text'  size='5' class='cb'value='~SS(19)~' id='S7'></td>
<td><input type='text'  size='5' class='cb'value='~SS(20)~' id='S8'></td>
<td><input type='text'  size='5' class='cb'value='~SS(21)~' id='S9'></td>
<td><input type='text'  size='5' class='cb'value='~SS(22)~' id='S10'></td>
<td><input type='text'  size='5' class='cb'value='~SS(23)~' id='S11'></td></tr></table</center><br>
<div id="foot"></div>
</body></html>
